From ee9e00859016dc678700a2a8373848e6cd230200 Mon Sep 17 00:00:00 2001
From: Chris Rummel <crummel@microsoft.com>
Date: Fri, 26 Oct 2018 05:17:58 -0500
Subject: [PATCH] Revert "Changing Number.BigInteger and Number.NumberBuffer to
 directly use fixed-sized buffers (#20371)"

This reverts commit a8e724dc174231de87d2e34b8939af7ad56350f4.
---
 .../shared/System/Number.BigInteger.cs        | 40 ++++++++++++++-----
 .../shared/System/Number.Dragon4.cs           |  4 +-
 .../shared/System/Number.Formatting.cs        | 30 +++++++-------
 .../shared/System/Number.Grisu3.cs            |  2 +-
 .../shared/System/Number.NumberBuffer.cs      | 24 ++++++-----
 .../shared/System/Number.NumberToDouble.cs    |  2 +-
 .../shared/System/Number.Parsing.cs           | 10 ++---
 7 files changed, 67 insertions(+), 45 deletions(-)

diff --git a/src/System.Private.CoreLib/shared/System/Number.BigInteger.cs b/src/System.Private.CoreLib/shared/System/Number.BigInteger.cs
index 2599823c44..2629fe2d39 100644
--- a/src/System.Private.CoreLib/shared/System/Number.BigInteger.cs
+++ b/src/System.Private.CoreLib/shared/System/Number.BigInteger.cs
@@ -130,7 +130,7 @@ namespace System
             };
 
             private int _length;
-            private fixed uint _blocks[MaxBlockCount];
+            private BlocksBuffer _blocks;
 
             public BigInteger(uint value)
             {
@@ -367,7 +367,7 @@ namespace System
                 Debug.Assert(unchecked((uint)(maxResultLength)) <= MaxBlockCount);
 
                 // Zero out result internal blocks.
-                Buffer.ZeroMemory((byte*)(result.GetBlocksPointer()), (maxResultLength * sizeof(uint)));
+                Buffer.ZeroMemory((byte*)(result._blocks.GetPointer()), (maxResultLength * sizeof(uint)));
 
                 int smallIndex = 0;
                 int resultStartIndex = 0;
@@ -559,7 +559,7 @@ namespace System
                     return;
                 }
 
-                Buffer.ZeroMemory((byte*)(GetBlocksPointer() + _length), ((blockCount - 1) * sizeof(uint)));
+                Buffer.ZeroMemory((byte*)(_blocks.GetPointer() + _length), ((blockCount - 1) * sizeof(uint)));
                 _length += (int)(blockCount);
                 _blocks[_length - 1] = blockValue;
             }
@@ -585,7 +585,7 @@ namespace System
                 var result = new BigInteger(0);
                 Multiply(ref this, ref value, ref result);
 
-                Buffer.Memcpy((byte*)(GetBlocksPointer()), (byte*)(result.GetBlocksPointer()), (result._length) * sizeof(uint));
+                Buffer.Memcpy((byte*)(_blocks.GetPointer()), (byte*)(result._blocks.GetPointer()), (result._length) * sizeof(uint));
                 _length = result._length;
             }
 
@@ -638,7 +638,7 @@ namespace System
             public void SetValue(ref BigInteger rhs)
             {
                 int rhsLength = rhs._length;
-                Buffer.Memcpy((byte*)(GetBlocksPointer()), (byte*)(rhs.GetBlocksPointer()), (rhsLength * sizeof(uint)));
+                Buffer.Memcpy((byte*)(_blocks.GetPointer()), (byte*)(rhs._blocks.GetPointer()), (rhsLength * sizeof(uint)));
                 _length = rhsLength;
             }
 
@@ -678,7 +678,7 @@ namespace System
                     _length += (int)(blocksToShift);
 
                     // Zero the remaining low blocks
-                    Buffer.ZeroMemory((byte*)(GetBlocksPointer()), (blocksToShift * sizeof(uint)));
+                    Buffer.ZeroMemory((byte*)(_blocks.GetPointer()), (blocksToShift * sizeof(uint)));
                 }
                 else
                 {
@@ -711,7 +711,7 @@ namespace System
                     _blocks[writeIndex - 1] = block << (int)(remainingBitsToShift);
 
                     // Zero the remaining low blocks
-                    Buffer.ZeroMemory((byte*)(GetBlocksPointer()), (blocksToShift * sizeof(uint)));
+                    Buffer.ZeroMemory((byte*)(_blocks.GetPointer()), (blocksToShift * sizeof(uint)));
 
                     // Check if the terminating block has no set bits
                     if (_blocks[_length - 1] == 0)
@@ -721,10 +721,30 @@ namespace System
                 }
             }
 
-            private uint* GetBlocksPointer()
+            [StructLayout(LayoutKind.Sequential, Pack = 1)]
+            private struct BlocksBuffer
             {
-                // This is safe to do since we are a ref struct
-                return (uint*)(Unsafe.AsPointer(ref _blocks[0]));
+                private fixed uint _blocks[MaxBlockCount];
+                
+                public ref uint this[int index]
+                {
+                    get
+                    {
+                        Debug.Assert(unchecked((uint)(index)) <= MaxBlockCount);
+                        return ref Unsafe.Add(ref GetPinnableReference(), index);
+                    }
+                }
+
+                public ref uint GetPinnableReference()
+                {
+                    var pThis = Unsafe.AsPointer(ref this);
+                    return ref Unsafe.AsRef<uint>(pThis);
+                }
+
+                public uint* GetPointer()
+                {
+                    return (uint*)(Unsafe.AsPointer(ref this));
+                }
             }
         }
     }
diff --git a/src/System.Private.CoreLib/shared/System/Number.Dragon4.cs b/src/System.Private.CoreLib/shared/System/Number.Dragon4.cs
index 3edefe37aa..ec2ae16cae 100644
--- a/src/System.Private.CoreLib/shared/System/Number.Dragon4.cs
+++ b/src/System.Private.CoreLib/shared/System/Number.Dragon4.cs
@@ -204,7 +204,7 @@ namespace System
             }
             else
             {
-                char* pCurrentDigit = (number.GetDigitsPointer() + digitsNum);
+                char* pCurrentDigit = (number.digits + digitsNum);
 
                 // Rounding up for 9 is special.
                 if (currentDigit == 9)
@@ -213,7 +213,7 @@ namespace System
                     while (true)
                     {
                         // If we are at the first digit
-                        if (pCurrentDigit == number.GetDigitsPointer())
+                        if (pCurrentDigit == number.digits)
                         {
                             // Output 1 at the next highest exponent
                             *pCurrentDigit = '1';
diff --git a/src/System.Private.CoreLib/shared/System/Number.Formatting.cs b/src/System.Private.CoreLib/shared/System/Number.Formatting.cs
index 51ecee31a9..ed0fdb6011 100644
--- a/src/System.Private.CoreLib/shared/System/Number.Formatting.cs
+++ b/src/System.Private.CoreLib/shared/System/Number.Formatting.cs
@@ -339,7 +339,7 @@ namespace System
 
         private static unsafe void DecimalToNumber(ref decimal d, ref NumberBuffer number)
         {
-            char* buffer = number.GetDigitsPointer();
+            char* buffer = number.digits;
             number.precision = DecimalPrecision;
             number.sign = d.IsNegative;
             number.kind = NumberBufferKind.Decimal;
@@ -354,7 +354,7 @@ namespace System
             int i = (int)((byte*)(buffer + DecimalPrecision) - (byte*)p) >> 1;
             number.scale = i - d.Scale;
 
-            char* dst = number.GetDigitsPointer();
+            char* dst = number.digits;
             while (--i >= 0)
             {
                 *dst++ = *p++;
@@ -947,14 +947,14 @@ namespace System
                 value = -value;
             }
 
-            char* buffer = number.GetDigitsPointer();
+            char* buffer = number.digits;
             char* p = UInt32ToDecChars(buffer + Int32Precision, (uint)value, 0);
             int i = (int)(buffer + Int32Precision - p);
 
             number.scale = i;
             number.kind = NumberBufferKind.Integer;
 
-            char* dst = number.GetDigitsPointer();
+            char* dst = number.digits;
             while (--i >= 0)
                 *dst++ = *p++;
             *dst = '\0';
@@ -1065,13 +1065,13 @@ namespace System
             number.precision = UInt32Precision;
             number.sign = false;
 
-            char* buffer = number.GetDigitsPointer();
+            char* buffer = number.digits;
             char* p = UInt32ToDecChars(buffer + UInt32Precision, value, 0);
             int i = (int)(buffer + UInt32Precision - p);
             number.scale = i;
             number.kind = NumberBufferKind.Integer;
 
-            char* dst = number.GetDigitsPointer();
+            char* dst = number.digits;
             while (--i >= 0)
                 *dst++ = *p++;
             *dst = '\0';
@@ -1181,7 +1181,7 @@ namespace System
                 value = (ulong)(-input);
             }
 
-            char* buffer = number.GetDigitsPointer();
+            char* buffer = number.digits;
             char* p = buffer + Int64Precision;
             while (High32(value) != 0)
                 p = UInt32ToDecChars(p, Int64DivMod1E9(ref value), 9);
@@ -1191,7 +1191,7 @@ namespace System
             number.scale = i;
             number.kind = NumberBufferKind.Integer;
 
-            char* dst = number.GetDigitsPointer();
+            char* dst = number.digits;
             while (--i >= 0)
                 *dst++ = *p++;
             *dst = '\0';
@@ -1322,7 +1322,7 @@ namespace System
             number.precision = UInt64Precision;
             number.sign = false;
 
-            char* buffer = number.GetDigitsPointer();
+            char* buffer = number.digits;
             char* p = buffer + UInt64Precision;
 
             while (High32(value) != 0)
@@ -1333,7 +1333,7 @@ namespace System
             number.scale = i;
             number.kind = NumberBufferKind.Integer;
 
-            char* dst = number.GetDigitsPointer();
+            char* dst = number.digits;
             while (--i >= 0)
                 *dst++ = *p++;
             *dst = '\0';
@@ -1591,7 +1591,7 @@ SkipRounding:
 
             int section;
             int src;
-            char* dig = number.GetDigitsPointer();
+            char* dig = number.digits;
             char ch;
 
             section = FindSection(format, dig[0] == 0 ? 2 : number.sign ? 1 : 0);
@@ -1963,7 +1963,7 @@ SkipRounding:
         private static unsafe void FormatFixed(ref ValueStringBuilder sb, ref NumberBuffer number, int nMaxDigits, NumberFormatInfo info, int[] groupDigits, string sDecimal, string sGroup)
         {
             int digPos = number.scale;
-            char* dig = number.GetDigitsPointer();
+            char* dig = number.digits;
 
             if (digPos > 0)
             {
@@ -2087,7 +2087,7 @@ SkipRounding:
 
         private static unsafe void FormatScientific(ref ValueStringBuilder sb, ref NumberBuffer number, int nMaxDigits, NumberFormatInfo info, char expChar)
         {
-            char* dig = number.GetDigitsPointer();
+            char* dig = number.digits;
 
             sb.Append((*dig != 0) ? *dig++ : '0');
 
@@ -2137,7 +2137,7 @@ SkipRounding:
                 }
             }
 
-            char* dig = number.GetDigitsPointer();
+            char* dig = number.digits;
 
             if (digPos > 0)
             {
@@ -2197,7 +2197,7 @@ SkipRounding:
 
         private static unsafe void RoundNumber(ref NumberBuffer number, int pos)
         {
-            char* dig = number.GetDigitsPointer();
+            char* dig = number.digits;
 
             int i = 0;
             while (i < pos && dig[i] != 0)
diff --git a/src/System.Private.CoreLib/shared/System/Number.Grisu3.cs b/src/System.Private.CoreLib/shared/System/Number.Grisu3.cs
index 60d629a14f..7d991a64d3 100644
--- a/src/System.Private.CoreLib/shared/System/Number.Grisu3.cs
+++ b/src/System.Private.CoreLib/shared/System/Number.Grisu3.cs
@@ -366,7 +366,7 @@ namespace System
 
                 // Step 4: Generate digits.
 
-                bool isSuccess = DigitGen(ref D, precision, number.GetDigitsPointer(), out int length, out int kappa);
+                bool isSuccess = DigitGen(ref D, precision, number.digits, out int length, out int kappa);
 
                 if (isSuccess)
                 {
diff --git a/src/System.Private.CoreLib/shared/System/Number.NumberBuffer.cs b/src/System.Private.CoreLib/shared/System/Number.NumberBuffer.cs
index b5ed19b545..c4d5ba5edf 100644
--- a/src/System.Private.CoreLib/shared/System/Number.NumberBuffer.cs
+++ b/src/System.Private.CoreLib/shared/System/Number.NumberBuffer.cs
@@ -19,20 +19,22 @@ namespace System
         [StructLayout(LayoutKind.Sequential, Pack = 1)]
         internal unsafe ref struct NumberBuffer
         {
-            public int precision;
-            public int scale;
-            public bool sign;
-            public NumberBufferKind kind;
-            public fixed char digits[NumberMaxDigits + 1];
+            public int precision;                       //  0
+            public int scale;                           //  4
+            private int _sign;                          //  8
+            private NumberBufferKind _kind;             // 12
+            private char* _allDigits;                   // 16
+            private DigitsAndNullTerminator _digits;    // 20 or 24
 
-            public char* GetDigitsPointer()
-            {
-                // This is safe to do since we are a ref struct
-                return (char*)(Unsafe.AsPointer(ref digits[0]));
-            }
+            public bool sign { get => _sign != 0; set => _sign = value ? 1 : 0; }
+            public char* digits => (char*)Unsafe.AsPointer(ref _digits);
+            public NumberBufferKind kind { get => _kind; set => _kind = value; }
+
+            [StructLayout(LayoutKind.Sequential, Size = (NumberMaxDigits + 1) * sizeof(char))]
+            private struct DigitsAndNullTerminator { }
         }
 
-        internal enum NumberBufferKind : byte
+        internal enum NumberBufferKind
         {
             Unknown = 0,
             Integer = 1,
diff --git a/src/System.Private.CoreLib/shared/System/Number.NumberToDouble.cs b/src/System.Private.CoreLib/shared/System/Number.NumberToDouble.cs
index 2df2b2aa49..4e4c5bcd34 100644
--- a/src/System.Private.CoreLib/shared/System/Number.NumberToDouble.cs
+++ b/src/System.Private.CoreLib/shared/System/Number.NumberToDouble.cs
@@ -314,7 +314,7 @@ namespace System
             }
 #endif
 
-            char* src = number.GetDigitsPointer();
+            char* src = number.digits;
             int total = GetLength(src);
             int remaining = total;
 
diff --git a/src/System.Private.CoreLib/shared/System/Number.Parsing.cs b/src/System.Private.CoreLib/shared/System/Number.Parsing.cs
index 2f25e76c14..4882f6059e 100644
--- a/src/System.Private.CoreLib/shared/System/Number.Parsing.cs
+++ b/src/System.Private.CoreLib/shared/System/Number.Parsing.cs
@@ -59,7 +59,7 @@ namespace System
             {
                 return false;
             }
-            char* p = number.GetDigitsPointer();
+            char* p = number.digits;
             Debug.Assert(p != null);
             int n = 0;
             while (--i >= 0)
@@ -100,7 +100,7 @@ namespace System
             {
                 return false;
             }
-            char* p = number.GetDigitsPointer();
+            char* p = number.digits;
             Debug.Assert(p != null);
             long n = 0;
             while (--i >= 0)
@@ -141,7 +141,7 @@ namespace System
             {
                 return false;
             }
-            char* p = number.GetDigitsPointer();
+            char* p = number.digits;
             Debug.Assert(p != null);
             uint n = 0;
             while (--i >= 0)
@@ -173,7 +173,7 @@ namespace System
             {
                 return false;
             }
-            char* p = number.GetDigitsPointer();
+            char* p = number.digits;
             Debug.Assert(p != null);
             ulong n = 0;
             while (--i >= 0)
@@ -1468,7 +1468,7 @@ namespace System
 
         private static unsafe bool NumberBufferToDecimal(ref NumberBuffer number, ref decimal value)
         {
-            char* p = number.GetDigitsPointer();
+            char* p = number.digits;
             int e = number.scale;
             bool sign = number.sign;
             uint c = *p;
-- 
2.18.0

