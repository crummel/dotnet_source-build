From 7341da0947638b389ba08178ebd6538503c6df97 Mon Sep 17 00:00:00 2001
From: Chris Rummel <crummel@microsoft.com>
Date: Sun, 16 Jun 2019 12:41:04 -0500
Subject: [PATCH 4/5] Work around Roslyn regression per
 https://github.com/dotnet/roslyn/issues/34583.

---
 .../Tracing/TraceLogging/ConcurrentSet.cs     |  4 ++--
 .../Runtime/InteropServices/MemoryMarshal.cs  |  8 +++----
 .../Reflection/CustomAttributeExtensions.cs   | 24 +++++++++----------
 3 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/TraceLogging/ConcurrentSet.cs b/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/TraceLogging/ConcurrentSet.cs
index a15dfaa797..7f366cc0f6 100644
--- a/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/TraceLogging/ConcurrentSet.cs
+++ b/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/TraceLogging/ConcurrentSet.cs
@@ -28,9 +28,9 @@ namespace System.Diagnostics.Tracing
     {
         private ItemType[]? items;
 
-        public ItemType? TryGet(KeyType key)
+        public ItemType TryGet(KeyType key)
         {
-            ItemType? item;
+            ItemType item;
             var oldItems = this.items;
 
             if (oldItems != null)
diff --git a/src/System.Private.CoreLib/shared/System/Runtime/InteropServices/MemoryMarshal.cs b/src/System.Private.CoreLib/shared/System/Runtime/InteropServices/MemoryMarshal.cs
index 6816d3c531..7d38b540cd 100644
--- a/src/System.Private.CoreLib/shared/System/Runtime/InteropServices/MemoryMarshal.cs
+++ b/src/System.Private.CoreLib/shared/System/Runtime/InteropServices/MemoryMarshal.cs
@@ -86,10 +86,10 @@ namespace System.Runtime.InteropServices
         /// <param name="memory">The memory to get the manager for.</param>
         /// <param name="manager">The returned manager of the <see cref="ReadOnlyMemory{T}"/>.</param>
         /// <returns>A <see cref="bool"/> indicating if it was successful.</returns>
-        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager? manager) // TODO-NULLABLE: https://github.com/dotnet/roslyn/issues/26761
+        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager) // TODO-NULLABLE: https://github.com/dotnet/roslyn/issues/26761
             where TManager : MemoryManager<T>
         {
-            TManager? localManager; // Use register for null comparison rather than byref
+            TManager localManager; // Use register for null comparison rather than byref
             manager = localManager = memory.GetObjectStartLength(out _, out _) as TManager;
             return localManager != null;
         }
@@ -105,10 +105,10 @@ namespace System.Runtime.InteropServices
         /// <param name="start">The offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</param>
         /// <param name="length">The length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</param>
         /// <returns>A <see cref="bool"/> indicating if it was successful.</returns>
-        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager? manager, out int start, out int length) // TODO-NULLABLE: https://github.com/dotnet/roslyn/issues/26761
+        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager, out int start, out int length) // TODO-NULLABLE: https://github.com/dotnet/roslyn/issues/26761
            where TManager : MemoryManager<T>
         {
-            TManager? localManager; // Use register for null comparison rather than byref
+            TManager localManager; // Use register for null comparison rather than byref
             manager = localManager = memory.GetObjectStartLength(out start, out length) as TManager;
 
             Debug.Assert(length >= 0);
diff --git a/src/System.Private.CoreLib/src/System/Reflection/CustomAttributeExtensions.cs b/src/System.Private.CoreLib/src/System/Reflection/CustomAttributeExtensions.cs
index d2c2d454d9..3df7e1dff5 100644
--- a/src/System.Private.CoreLib/src/System/Reflection/CustomAttributeExtensions.cs
+++ b/src/System.Private.CoreLib/src/System/Reflection/CustomAttributeExtensions.cs
@@ -26,21 +26,21 @@ namespace System.Reflection
             return Attribute.GetCustomAttribute(element, attributeType);
         }
 
-        public static T? GetCustomAttribute<T>(this Assembly element) where T : Attribute
+        public static T GetCustomAttribute<T>(this Assembly element) where T : Attribute
         {
-            return (T?)GetCustomAttribute(element, typeof(T));
+            return (T)GetCustomAttribute(element, typeof(T));
         }
-        public static T? GetCustomAttribute<T>(this Module element) where T : Attribute
+        public static T GetCustomAttribute<T>(this Module element) where T : Attribute
         {
-            return (T?)GetCustomAttribute(element, typeof(T));
+            return (T)GetCustomAttribute(element, typeof(T));
         }
-        public static T? GetCustomAttribute<T>(this MemberInfo element) where T : Attribute
+        public static T GetCustomAttribute<T>(this MemberInfo element) where T : Attribute
         {
-            return (T?)GetCustomAttribute(element, typeof(T));
+            return (T)GetCustomAttribute(element, typeof(T));
         }
-        public static T? GetCustomAttribute<T>(this ParameterInfo element) where T : Attribute
+        public static T GetCustomAttribute<T>(this ParameterInfo element) where T : Attribute
         {
-            return (T?)GetCustomAttribute(element, typeof(T));
+            return (T)GetCustomAttribute(element, typeof(T));
         }
 
         public static Attribute? GetCustomAttribute(this MemberInfo element, Type attributeType, bool inherit)
@@ -52,13 +52,13 @@ namespace System.Reflection
             return Attribute.GetCustomAttribute(element, attributeType, inherit);
         }
 
-        public static T? GetCustomAttribute<T>(this MemberInfo element, bool inherit) where T : Attribute
+        public static T GetCustomAttribute<T>(this MemberInfo element, bool inherit) where T : Attribute
         {
-            return (T?)GetCustomAttribute(element, typeof(T), inherit);
+            return (T)GetCustomAttribute(element, typeof(T), inherit);
         }
-        public static T? GetCustomAttribute<T>(this ParameterInfo element, bool inherit) where T : Attribute
+        public static T GetCustomAttribute<T>(this ParameterInfo element, bool inherit) where T : Attribute
         {
-            return (T?)GetCustomAttribute(element, typeof(T), inherit);
+            return (T)GetCustomAttribute(element, typeof(T), inherit);
         }
         #endregion
 
-- 
2.18.0

