From b0366248eadf4206438070e2397072687579f14c Mon Sep 17 00:00:00 2001
From: Chris Rummel <crummel@microsoft.com>
Date: Thu, 18 Jul 2019 21:45:14 -0500
Subject: [PATCH 3/5] More nullability.

---
 src/System.Runtime/ref/System.Runtime.cs | 168 +++++++++++------------
 1 file changed, 84 insertions(+), 84 deletions(-)

diff --git a/src/System.Runtime/ref/System.Runtime.cs b/src/System.Runtime/ref/System.Runtime.cs
index d134aacc6e..4b76bc4b73 100644
--- a/src/System.Runtime/ref/System.Runtime.cs
+++ b/src/System.Runtime/ref/System.Runtime.cs
@@ -98,7 +98,7 @@ public partial class AggregateException : System.Exception
         public override System.Exception GetBaseException() { throw null; }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
         public void Handle(System.Func<System.Exception, bool> predicate) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public static partial class AppContext
     {
@@ -430,7 +430,7 @@ public partial class BadImageFormatException : System.SystemException
         public string? FusionLog { get { throw null; } }
         public override string Message { get { throw null; } }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public readonly partial struct Boolean : System.IComparable, System.IComparable<bool>, System.IConvertible, System.IEquatable<bool>
     {
@@ -460,7 +460,7 @@ public partial class BadImageFormatException : System.SystemException
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public System.Boolean TryFormat(System.Span<char> destination, out int charsWritten) { throw null; }
         public static System.Boolean TryParse(System.ReadOnlySpan<char> value, out System.Boolean result) { throw null; }
@@ -508,7 +508,7 @@ public static partial class Buffer
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -585,7 +585,7 @@ public static partial class Buffer
         public static System.Char ToLower(System.Char c) { throw null; }
         public static System.Char ToLower(System.Char c, System.Globalization.CultureInfo culture) { throw null; }
         public static System.Char ToLowerInvariant(System.Char c) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public static string ToString(System.Char c) { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public static System.Char ToUpper(System.Char c) { throw null; }
@@ -718,7 +718,7 @@ public sealed partial class CLSCompliantAttribute : System.Attribute
         public double ToOADate() { throw null; }
         public string ToShortDateString() { throw null; }
         public string ToShortTimeString() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -816,7 +816,7 @@ public enum DateTimeKind
         public long ToFileTime() { throw null; }
         public System.DateTimeOffset ToLocalTime() { throw null; }
         public System.DateTimeOffset ToOffset(System.TimeSpan offset) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? formatProvider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }
@@ -864,7 +864,7 @@ public sealed partial class DBNull : System.IConvertible, System.Runtime.Seriali
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
     }
     public readonly partial struct Decimal : System.IComparable, System.IComparable<decimal>, System.IConvertible, System.IEquatable<decimal>, System.IFormattable, System.Runtime.Serialization.IDeserializationCallback
@@ -987,7 +987,7 @@ public sealed partial class DBNull : System.IConvertible, System.Runtime.Seriali
         [System.CLSCompliantAttribute(false)]
         public static sbyte ToSByte(System.Decimal value) { throw null; }
         public static float ToSingle(System.Decimal d) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -1089,7 +1089,7 @@ public partial class DivideByZeroException : System.ArithmeticException
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -1160,7 +1160,7 @@ public abstract partial class Enum : System.ValueType, System.IComparable, Syste
         public static object ToObject(System.Type enumType, uint value) { throw null; }
         [System.CLSCompliantAttribute(false)]
         public static object ToObject(System.Type enumType, ulong value) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         [System.ObsoleteAttribute("The provider argument is not used. Please use ToString().")]
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
@@ -1196,7 +1196,7 @@ public partial class Exception : System.Runtime.Serialization.ISerializable
         public virtual System.Exception GetBaseException() { throw null; }
         public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
         public new System.Type GetType() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.ObsoleteAttribute("This type previously indicated an unspecified fatal error in the runtime. The runtime no longer raises this exception so this type is obsolete.")]
     public sealed partial class ExecutionEngineException : System.SystemException
@@ -1238,7 +1238,7 @@ public abstract partial class FormattableString : System.IFormattable
         public abstract object?[] GetArguments();
         public static string Invariant(System.FormattableString formattable) { throw null; }
         string System.IFormattable.ToString(string? ignored, System.IFormatProvider? formatProvider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public abstract string ToString(System.IFormatProvider? formatProvider);
     }
     public partial class FtpStyleUriParser : System.UriParser
@@ -1366,7 +1366,7 @@ public partial struct Guid : System.IComparable, System.IComparable<System.Guid>
         public static System.Guid ParseExact(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format) { throw null; }
         public static System.Guid ParseExact(string input, string format) { throw null; }
         public byte[] ToByteArray() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
         public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format = default(System.ReadOnlySpan<char>)) { throw null; }
@@ -1480,7 +1480,7 @@ public partial interface IFormattable
         public override int GetHashCode() { throw null; }
         public int GetOffset(int length) { throw null; }
         public static implicit operator System.Index (int value) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public sealed partial class IndexOutOfRangeException : System.SystemException
     {
@@ -1531,7 +1531,7 @@ public sealed partial class InsufficientMemoryException : System.OutOfMemoryExce
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -1572,7 +1572,7 @@ public sealed partial class InsufficientMemoryException : System.OutOfMemoryExce
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -1613,7 +1613,7 @@ public sealed partial class InsufficientMemoryException : System.OutOfMemoryExce
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -1654,7 +1654,7 @@ public sealed partial class InsufficientMemoryException : System.OutOfMemoryExce
         public long ToInt64() { throw null; }
         [System.CLSCompliantAttribute(false)]
         public unsafe void* ToPointer() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(string format) { throw null; }
     }
     public partial class InvalidCastException : System.SystemException
@@ -1763,7 +1763,7 @@ public partial class MemberAccessException : System.SystemException
         public System.Memory<T> Slice(int start) { throw null; }
         public System.Memory<T> Slice(int start, int length) { throw null; }
         public T[] ToArray() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public bool TryCopyTo(System.Memory<T> destination) { throw null; }
     }
     public partial class MethodAccessException : System.MemberAccessException
@@ -1999,7 +1999,7 @@ public partial class PlatformNotSupportedException : System.NotSupportedExceptio
         public override int GetHashCode() { throw null; }
         public (int Offset, int Length) GetOffsetAndLength(int length) { throw null; }
         public static System.Range StartAt(System.Index start) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class RankException : System.SystemException
     {
@@ -2030,7 +2030,7 @@ public partial class RankException : System.SystemException
         public System.ReadOnlyMemory<T> Slice(int start) { throw null; }
         public System.ReadOnlyMemory<T> Slice(int start, int length) { throw null; }
         public T[] ToArray() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public bool TryCopyTo(System.Memory<T> destination) { throw null; }
     }
     public readonly ref partial struct ReadOnlySpan<T>
@@ -2062,7 +2062,7 @@ public partial class RankException : System.SystemException
         public System.ReadOnlySpan<T> Slice(int start) { throw null; }
         public System.ReadOnlySpan<T> Slice(int start, int length) { throw null; }
         public T[] ToArray() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public bool TryCopyTo(System.Span<T> destination) { throw null; }
         public ref partial struct Enumerator
         {
@@ -2157,7 +2157,7 @@ public partial struct RuntimeTypeHandle : System.Runtime.Serialization.ISerializ
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -2219,7 +2219,7 @@ public sealed partial class SerializableAttribute : System.Attribute
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -2261,7 +2261,7 @@ public sealed partial class SerializableAttribute : System.Attribute
         public System.Span<T> Slice(int start) { throw null; }
         public System.Span<T> Slice(int start, int length) { throw null; }
         public T[] ToArray() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public bool TryCopyTo(System.Span<T> destination) { throw null; }
         public ref partial struct Enumerator
         {
@@ -2346,7 +2346,7 @@ public sealed partial class String : System.Collections.Generic.IEnumerable<char
         public bool EndsWith(System.String value, System.StringComparison comparisonType) { throw null; }
         public System.Text.StringRuneEnumerator EnumerateRunes() { throw null; }
         public override bool Equals(object? obj) { throw null; }
-        public bool Equals(System.String? value) { throw null; }
+        public bool Equals(System.String value) { throw null; }
         public static bool Equals(System.String? a, System.String? b) { throw null; }
         public static bool Equals(System.String? a, System.String? b, System.StringComparison comparisonType) { throw null; }
         public bool Equals(System.String? value, System.StringComparison comparisonType) { throw null; }
@@ -2460,7 +2460,7 @@ public sealed partial class String : System.Collections.Generic.IEnumerable<char
         public System.String ToLower() { throw null; }
         public System.String ToLower(System.Globalization.CultureInfo? culture) { throw null; }
         public System.String ToLowerInvariant() { throw null; }
-        public override System.String ToString() { throw null; }
+        public override System.String? ToString() { throw null; }
         public System.String ToString(System.IFormatProvider? provider) { throw null; }
         public System.String ToUpper() { throw null; }
         public System.String ToUpper(System.Globalization.CultureInfo? culture) { throw null; }
@@ -2578,7 +2578,7 @@ public partial class TimeoutException : System.SystemException
         public static System.TimeSpan ParseExact(string input, string[] formats, System.IFormatProvider? formatProvider) { throw null; }
         public static System.TimeSpan ParseExact(string input, string[] formats, System.IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles) { throw null; }
         public System.TimeSpan Subtract(System.TimeSpan ts) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }
         public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format = default(System.ReadOnlySpan<char>), System.IFormatProvider? formatProvider = null) { throw null; }
@@ -2635,7 +2635,7 @@ public sealed partial class TimeZoneInfo : System.Runtime.Serialization.IDeseria
         public static System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string? displayName, string? standardDisplayName, string? daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[]? adjustmentRules) { throw null; }
         public static System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string? displayName, string? standardDisplayName, string? daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[]? adjustmentRules, bool disableDaylightSavingTime) { throw null; }
         public override bool Equals(object? obj) { throw null; }
-        public bool Equals(System.TimeZoneInfo? other) { throw null; }
+        public bool Equals(System.TimeZoneInfo other) { throw null; }
         public static System.TimeZoneInfo FindSystemTimeZoneById(string id) { throw null; }
         public static System.TimeZoneInfo FromSerializedString(string source) { throw null; }
         public System.TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules() { throw null; }
@@ -2654,7 +2654,7 @@ public sealed partial class TimeZoneInfo : System.Runtime.Serialization.IDeseria
         void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object? sender) { }
         void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
         public string ToSerializedString() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public sealed partial class AdjustmentRule : System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable,
             System.IEquatable<System.TimeZoneInfo.AdjustmentRule>
         {
@@ -2665,7 +2665,7 @@ public sealed partial class AdjustmentRule : System.Runtime.Serialization.IDeser
             public System.TimeZoneInfo.TransitionTime DaylightTransitionEnd { get { throw null; } }
             public System.TimeZoneInfo.TransitionTime DaylightTransitionStart { get { throw null; } }
             public static System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd) { throw null; }
-            public bool Equals(System.TimeZoneInfo.AdjustmentRule? other) { throw null; }
+            public bool Equals(System.TimeZoneInfo.AdjustmentRule other) { throw null; }
             public override int GetHashCode() { throw null; }
             void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object? sender) { }
             void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
@@ -2807,7 +2807,7 @@ public partial class Tuple<T1> : System.Collections.IStructuralComparable, Syste
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class Tuple<T1, T2> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple
     {
@@ -2822,7 +2822,7 @@ public partial class Tuple<T1, T2> : System.Collections.IStructuralComparable, S
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class Tuple<T1, T2, T3> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple
     {
@@ -2838,7 +2838,7 @@ public partial class Tuple<T1, T2, T3> : System.Collections.IStructuralComparabl
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class Tuple<T1, T2, T3, T4> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple
     {
@@ -2855,7 +2855,7 @@ public partial class Tuple<T1, T2, T3, T4> : System.Collections.IStructuralCompa
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class Tuple<T1, T2, T3, T4, T5> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple
     {
@@ -2873,7 +2873,7 @@ public partial class Tuple<T1, T2, T3, T4, T5> : System.Collections.IStructuralC
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class Tuple<T1, T2, T3, T4, T5, T6> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple
     {
@@ -2892,7 +2892,7 @@ public partial class Tuple<T1, T2, T3, T4, T5, T6> : System.Collections.IStructu
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class Tuple<T1, T2, T3, T4, T5, T6, T7> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple
     {
@@ -2912,9 +2912,9 @@ public partial class Tuple<T1, T2, T3, T4, T5, T6, T7> : System.Collections.IStr
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple where TRest : notnull
+    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.Runtime.CompilerServices.ITuple
     {
         public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { }
         public T1 Item1 { get { throw null; } }
@@ -2933,7 +2933,7 @@ public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collectio
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? obj) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public abstract partial class Type : System.Reflection.MemberInfo, System.Reflection.IReflect
     {
@@ -3126,7 +3126,7 @@ public abstract partial class Type : System.Reflection.MemberInfo, System.Reflec
         public static bool operator ==(System.Type? left, System.Type? right) { throw null; }
         public static bool operator !=(System.Type? left, System.Type? right) { throw null; }
         public static System.Type? ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class TypeAccessException : System.TypeLoadException
     {
@@ -3229,7 +3229,7 @@ public partial class TypeUnloadedException : System.SystemException
         System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -3280,7 +3280,7 @@ public partial class TypeUnloadedException : System.SystemException
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         ulong System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -3331,7 +3331,7 @@ public partial class TypeUnloadedException : System.SystemException
         ushort System.IConvertible.ToUInt16(System.IFormatProvider? provider) { throw null; }
         uint System.IConvertible.ToUInt32(System.IFormatProvider? provider) { throw null; }
         System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider? provider) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(System.IFormatProvider? provider) { throw null; }
         public string ToString(string? format) { throw null; }
         public string ToString(string? format, System.IFormatProvider? provider) { throw null; }
@@ -3371,7 +3371,7 @@ public partial class TypeUnloadedException : System.SystemException
         bool System.IEquatable<System.UIntPtr>.Equals(System.UIntPtr other) { throw null; }
         void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
         public unsafe void* ToPointer() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public uint ToUInt32() { throw null; }
         public ulong ToUInt64() { throw null; }
     }
@@ -3473,7 +3473,7 @@ public partial class Uri : System.Runtime.Serialization.ISerializable
         [System.ObsoleteAttribute("The method has been deprecated. It is not used by the system. https://go.microsoft.com/fwlink/?linkid=14202")]
         protected virtual void Parse() { }
         void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public static bool TryCreate(string? uriString, System.UriKind uriKind, [System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] out System.Uri? result) { throw null; }
         public static bool TryCreate(System.Uri? baseUri, string? relativeUri, [System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] out System.Uri? result) { throw null; }
         public static bool TryCreate(System.Uri? baseUri, System.Uri? relativeUri, [System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] out System.Uri? result) { throw null; }
@@ -3571,7 +3571,7 @@ public partial struct ValueTuple : System.Collections.IStructuralComparable, Sys
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1>>, System.IEquatable<System.ValueTuple<T1>>, System.Runtime.CompilerServices.ITuple
     {
@@ -3587,7 +3587,7 @@ public partial struct ValueTuple<T1> : System.Collections.IStructuralComparable,
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1, T2> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2>>, System.IEquatable<System.ValueTuple<T1, T2>>, System.Runtime.CompilerServices.ITuple
     {
@@ -3604,7 +3604,7 @@ public partial struct ValueTuple<T1, T2> : System.Collections.IStructuralCompara
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1, T2, T3> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3>>, System.IEquatable<System.ValueTuple<T1, T2, T3>>, System.Runtime.CompilerServices.ITuple
     {
@@ -3622,7 +3622,7 @@ public partial struct ValueTuple<T1, T2, T3> : System.Collections.IStructuralCom
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1, T2, T3, T4> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4>>, System.IEquatable<System.ValueTuple<T1, T2, T3, T4>>, System.Runtime.CompilerServices.ITuple
     {
@@ -3641,7 +3641,7 @@ public partial struct ValueTuple<T1, T2, T3, T4> : System.Collections.IStructura
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1, T2, T3, T4, T5> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.Runtime.CompilerServices.ITuple
     {
@@ -3661,7 +3661,7 @@ public partial struct ValueTuple<T1, T2, T3, T4, T5> : System.Collections.IStruc
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1, T2, T3, T4, T5, T6> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.Runtime.CompilerServices.ITuple
     {
@@ -3682,7 +3682,7 @@ public partial struct ValueTuple<T1, T2, T3, T4, T5, T6> : System.Collections.IS
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1, T2, T3, T4, T5, T6, T7> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.Runtime.CompilerServices.ITuple
     {
@@ -3704,7 +3704,7 @@ public partial struct ValueTuple<T1, T2, T3, T4, T5, T6, T7> : System.Collection
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial struct ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.Runtime.CompilerServices.ITuple where TRest : struct
     {
@@ -3727,7 +3727,7 @@ public partial struct ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Col
         bool System.Collections.IStructuralEquatable.Equals(object? other, System.Collections.IEqualityComparer comparer) { throw null; }
         int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }
         int System.IComparable.CompareTo(object? other) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public abstract partial class ValueType
     {
@@ -3754,7 +3754,7 @@ public sealed partial class Version : System.ICloneable, System.IComparable, Sys
         public int CompareTo(object? version) { throw null; }
         public int CompareTo(System.Version? value) { throw null; }
         public override bool Equals(object? obj) { throw null; }
-        public bool Equals(System.Version? obj) { throw null; }
+        public bool Equals(System.Version obj) { throw null; }
         public override int GetHashCode() { throw null; }
         public static bool operator ==(System.Version? v1, System.Version? v2) { throw null; }
         public static bool operator >(System.Version? v1, System.Version? v2) { throw null; }
@@ -3764,7 +3764,7 @@ public sealed partial class Version : System.ICloneable, System.IComparable, Sys
         public static bool operator <=(System.Version? v1, System.Version? v2) { throw null; }
         public static System.Version Parse(System.ReadOnlySpan<char> input) { throw null; }
         public static System.Version Parse(string input) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(int fieldCount) { throw null; }
         public bool TryFormat(System.Span<char> destination, int fieldCount, out int charsWritten) { throw null; }
         public bool TryFormat(System.Span<char> destination, out int charsWritten) { throw null; }
@@ -3944,7 +3944,7 @@ public partial interface IComparer<in T>
     {
         int Compare([System.Diagnostics.CodeAnalysis.AllowNullAttribute] T x, [System.Diagnostics.CodeAnalysis.AllowNullAttribute] T y);
     }
-    public partial interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable where TKey : notnull
+    public partial interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
     {
         TValue this[TKey key] { get; set; }
         System.Collections.Generic.ICollection<TKey> Keys { get; }
@@ -3978,7 +3978,7 @@ public partial interface IReadOnlyCollection<out T> : System.Collections.Generic
     {
         int Count { get; }
     }
-    public partial interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable where TKey : notnull
+    public partial interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
     {
         TValue this[TKey key] { get; }
         System.Collections.Generic.IEnumerable<TKey> Keys { get; }
@@ -4025,7 +4025,7 @@ public static partial class KeyValuePair
         public TValue Value { get { throw null; } }
         [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
         public void Deconstruct(out TKey key, out TValue value) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
 }
 namespace System.Collections.ObjectModel
@@ -4379,7 +4379,7 @@ public partial class CompareInfo : System.Runtime.Serialization.IDeserialization
         public virtual int LastIndexOf(string source, string value, int startIndex, int count) { throw null; }
         public virtual int LastIndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options) { throw null; }
         void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object? sender) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.FlagsAttribute]
     public enum CompareOptions
@@ -4440,7 +4440,7 @@ public partial class CultureInfo : System.ICloneable, System.IFormatProvider
         public virtual object? GetFormat(System.Type? formatType) { throw null; }
         public override int GetHashCode() { throw null; }
         public static System.Globalization.CultureInfo ReadOnly(System.Globalization.CultureInfo ci) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class CultureNotFoundException : System.ArgumentException
     {
@@ -4896,7 +4896,7 @@ public partial class RegionInfo
         public virtual string TwoLetterISORegionName { get { throw null; } }
         public override bool Equals(object? value) { throw null; }
         public override int GetHashCode() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class SortKey
     {
@@ -4906,7 +4906,7 @@ public partial class SortKey
         public static int Compare(System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2) { throw null; }
         public override bool Equals(object? value) { throw null; }
         public override int GetHashCode() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public sealed partial class SortVersion :
         System.IEquatable<System.Globalization.SortVersion>
@@ -4914,7 +4914,7 @@ public sealed partial class SortVersion :
         public SortVersion(int fullVersion, System.Guid sortId) { }
         public int FullVersion { get { throw null; } }
         public System.Guid SortId { get { throw null; } }
-        public bool Equals(System.Globalization.SortVersion? other) { throw null; }
+        public bool Equals(System.Globalization.SortVersion other) { throw null; }
         public override bool Equals(object? obj) { throw null; }
         public override int GetHashCode() { throw null; }
         public static bool operator ==(System.Globalization.SortVersion? left, System.Globalization.SortVersion? right) { throw null; }
@@ -5002,7 +5002,7 @@ public partial class TextInfo : System.ICloneable, System.Runtime.Serialization.
         void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object? sender) { }
         public virtual char ToLower(char c) { throw null; }
         public virtual string ToLower(string str) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToTitleCase(string str) { throw null; }
         public virtual char ToUpper(char c) { throw null; }
         public virtual string ToUpper(string str) { throw null; }
@@ -5151,7 +5151,7 @@ public partial class FileLoadException : System.IO.IOException
         public string? FusionLog { get { throw null; } }
         public override string Message { get { throw null; } }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public enum FileMode
     {
@@ -5174,7 +5174,7 @@ public partial class FileNotFoundException : System.IO.IOException
         public string? FusionLog { get { throw null; } }
         public override string Message { get { throw null; } }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.FlagsAttribute]
     public enum FileOptions
@@ -5412,7 +5412,7 @@ public abstract partial class Assembly : System.Reflection.ICustomAttributeProvi
         public static System.Reflection.Assembly ReflectionOnlyLoad(byte[] rawAssembly) { throw null; }
         public static System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString) { throw null; }
         public static System.Reflection.Assembly ReflectionOnlyLoadFrom(string assemblyFile) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public static System.Reflection.Assembly UnsafeLoadFrom(string assemblyFile) { throw null; }
     }
     [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, Inherited=false)]
@@ -5542,7 +5542,7 @@ public sealed partial class AssemblyName : System.ICloneable, System.Runtime.Ser
         public static bool ReferenceMatchesDefinition(System.Reflection.AssemblyName? reference, System.Reflection.AssemblyName? definition) { throw null; }
         public void SetPublicKey(byte[]? publicKey) { }
         public void SetPublicKeyToken(byte[]? publicKeyToken) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.FlagsAttribute]
     public enum AssemblyNameFlags
@@ -5654,7 +5654,7 @@ public partial class CustomAttributeData
         public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Module target) { throw null; }
         public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.ParameterInfo target) { throw null; }
         public override int GetHashCode() { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public static partial class CustomAttributeExtensions
     {
@@ -5715,7 +5715,7 @@ public partial class CustomAttributeFormatException : System.FormatException
         public override int GetHashCode() { throw null; }
         public static bool operator ==(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right) { throw null; }
         public static bool operator !=(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public readonly partial struct CustomAttributeTypedArgument
     {
@@ -5728,7 +5728,7 @@ public partial class CustomAttributeFormatException : System.FormatException
         public override int GetHashCode() { throw null; }
         public static bool operator ==(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right) { throw null; }
         public static bool operator !=(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Struct)]
     public sealed partial class DefaultMemberAttribute : System.Attribute
@@ -5780,7 +5780,7 @@ public partial class ExceptionHandlingClause
         public virtual int HandlerOffset { get { throw null; } }
         public virtual int TryLength { get { throw null; } }
         public virtual int TryOffset { get { throw null; } }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.FlagsAttribute]
     public enum ExceptionHandlingClauseOptions
@@ -5920,7 +5920,7 @@ public partial class LocalVariableInfo
         public virtual bool IsPinned { get { throw null; } }
         public virtual int LocalIndex { get { throw null; } }
         public virtual System.Type LocalType { get { throw null; } }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public partial class ManifestResourceInfo
     {
@@ -6137,7 +6137,7 @@ public abstract partial class Module : System.Reflection.ICustomAttributeProvide
         public virtual string ResolveString(int metadataToken) { throw null; }
         public System.Type ResolveType(int metadataToken) { throw null; }
         public virtual System.Type ResolveType(int metadataToken, System.Type[]? genericTypeArguments, System.Type[]? genericMethodArguments) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public delegate System.Reflection.Module ModuleResolveEventHandler(object sender, System.ResolveEventArgs e);
     [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]
@@ -6202,7 +6202,7 @@ public partial class ParameterInfo : System.Reflection.ICustomAttributeProvider,
         public object GetRealObject(System.Runtime.Serialization.StreamingContext context) { throw null; }
         public virtual System.Type[] GetRequiredCustomModifiers() { throw null; }
         public virtual bool IsDefined(System.Type attributeType, bool inherit) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     public readonly partial struct ParameterModifier
     {
@@ -6297,7 +6297,7 @@ public sealed partial class ReflectionTypeLoadException : System.SystemException
         public override string Message { get { throw null; } }
         public System.Type[]? Types { get { throw null; } }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.FlagsAttribute]
     public enum ResourceAttributes
@@ -6689,7 +6689,7 @@ public abstract partial class CustomConstantAttribute : System.Attribute
     public sealed partial class DateTimeConstantAttribute : System.Runtime.CompilerServices.CustomConstantAttribute
     {
         public DateTimeConstantAttribute(long ticks) { }
-        public override object Value { get { throw null; } }
+        public override object? Value { get { throw null; } }
     }
     [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Parameter, Inherited=false)]
     public sealed partial class DecimalConstantAttribute : System.Attribute
@@ -7082,7 +7082,7 @@ public partial class ExternalException : System.SystemException
         public ExternalException(string? message, System.Exception? inner) { }
         public ExternalException(string? message, int errorCode) { }
         public virtual int ErrorCode { get { throw null; } }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.AttributeUsageAttribute(System.AttributeTargets.Field, Inherited=false)]
     public sealed partial class FieldOffsetAttribute : System.Attribute
@@ -7399,7 +7399,7 @@ public partial class SecurityException : System.SystemException
         public string? RefusedSet { get { throw null; } set { } }
         public string? Url { get { throw null; } set { } }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
     }
     [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, AllowMultiple=false)]
     public sealed partial class SecurityRulesAttribute : System.Attribute
@@ -7786,7 +7786,7 @@ public enum NormalizationForm
         public static bool operator <=(System.Text.Rune left, System.Text.Rune right) { throw null; }
         public static System.Text.Rune ToLower(System.Text.Rune value, System.Globalization.CultureInfo culture) { throw null; }
         public static System.Text.Rune ToLowerInvariant(System.Text.Rune value) { throw null; }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public static System.Text.Rune ToUpper(System.Text.Rune value, System.Globalization.CultureInfo culture) { throw null; }
         public static System.Text.Rune ToUpperInvariant(System.Text.Rune value) { throw null; }
         public static bool TryCreate(char highSurrogate, char lowSurrogate, out System.Text.Rune result) { throw null; }
@@ -7892,7 +7892,7 @@ public sealed partial class StringBuilder : System.Runtime.Serialization.ISerial
         public System.Text.StringBuilder Replace(string oldValue, string? newValue) { throw null; }
         public System.Text.StringBuilder Replace(string oldValue, string? newValue, int startIndex, int count) { throw null; }
         void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
-        public override string ToString() { throw null; }
+        public override string? ToString() { throw null; }
         public string ToString(int startIndex, int length) { throw null; }
         public partial struct ChunkEnumerator
         {
-- 
2.21.0

