<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" InitialTargets="SetNuGetPackagesEnvironment" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory).., dir.props))/dir.props" />

  <PropertyGroup>
    <RepositoryName Condition="'$(RepositoryName)' == ''">$(MSBuildProjectName)</RepositoryName>
    <SourceDirectory Condition="'$(SourceDirectory)' == ''">$(RepositoryName)</SourceDirectory>
    <ProjectDirectory Condition="'$(ProjectDirectory)' == '' and '$(OfflineBuild)' != 'true'">$(ClonedSubmoduleDirectory)$(SourceDirectory).$(PreferredHash)/</ProjectDirectory>
    <ProjectDirectory Condition="'$(ProjectDirectory)' == '' and '$(OfflineBuild)' == 'true'">$(SubmoduleDirectory)$(SourceDirectory).$(PreferredHash)/</ProjectDirectory>
    <RepositoryOrganization Condition="'$(RepostioryOrganization)' == ''">dotnet</RepositoryOrganization>
    <RepositoryBranch Condition="'$(RepositoryBranch)' == ''">release/2.0.0</RepositoryBranch>
    <MinimalConsoleLogOutput Condition="'$(MinimalConsoleLogOutput)' == ''">true</MinimalConsoleLogOutput>
    <RepoConsoleLogFile>$(LoggingDir)$(RepositoryName).log</RepoConsoleLogFile>
    <RedirectRepoOutputToLog Condition="'$(MinimalConsoleLogOutput)' == 'true'">&gt;&gt; $(RepoConsoleLogFile) 2&gt;&amp;1</RedirectRepoOutputToLog>
  </PropertyGroup>

  <PropertyGroup>
    <OutputGitInfoPropsFile>$(GitInfoOutputDir)$(RepositoryName).props</OutputGitInfoPropsFile>
    <OfflineGitInfoPropsFile>$(GitInfoOfflineDir)$(RepositoryName).props</OfflineGitInfoPropsFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <FlagParameterPrefix>-</FlagParameterPrefix>
    <ArcadeFalseBoolBuildArg>0</ArcadeFalseBoolBuildArg>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <FlagParameterPrefix>--</FlagParameterPrefix>
    <ArcadeFalseBoolBuildArg>false</ArcadeFalseBoolBuildArg>
  </PropertyGroup>

  <Import Project="$(OutputGitInfoPropsFile)" Condition="Exists('$(OutputGitInfoPropsFile)')" />
  <Import Project="$(OfflineGitInfoPropsFile)" Condition="Exists('$(OfflineGitInfoPropsFile)')" />

  <PropertyGroup>
    <GitCommitDateNoDashes>$(GitCommitDate.Replace('-', ''))</GitCommitDateNoDashes>
  </PropertyGroup>

  <PropertyGroup>
    <VersionFilename>Latest_Packages.txt</VersionFilename>
    <VersionFileDirectory>$(LocalBuildInfoRoot)</VersionFileDirectory>
    <VersionFileLocation Condition="'$(VersionFileLocation)' == ''">$(VersionFileDirectory)$(RepositoryOrganization)/$(RepositoryName)/$(RepositoryBranch)/$(VersionFilename)</VersionFileLocation>
  </PropertyGroup>

  <PropertyGroup>
    <OrchestratedManifestBuildName Condition="'$(OrchestratedManifestBuildName)' == ''">$(RepositoryName)</OrchestratedManifestBuildName>
  </PropertyGroup>

  <!-- A human-readable description of what's building and why. -->
  <PropertyGroup>
    <ProjectBuildReason>'$(RepositoryName)'</ProjectBuildReason>
    <ProjectBuildReason Condition="'$(OfflineBuild)' != 'true' AND '$(ArchiveDownloadedPackages)' == 'true'">$(ProjectBuildReason) to produce tarball</ProjectBuildReason>
    <ProjectBuildReason Condition="'$(OfflineBuild)' == 'true'">$(ProjectBuildReason) in tarball</ProjectBuildReason>
  </PropertyGroup>

  <!-- some repos haven't updated to the latest version of Arcade yet, which moves the list of NuGet feeds into NuGet.config. -->
  <!-- in the meantime, we can supply the feeds via the RestoreSources environment variable.  This is the full union of all feeds
       used by projects so we don't have to do it repo-by-repo. -->
  <PropertyGroup>
    <EnvironmentRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentRestoreSources)%3B$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)</EnvironmentRestoreSources>

    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://api.nuget.org/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/aspnetcore-tools/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/dotnet-core/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/dotnet-coreclr/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/dotnet-corefxtestdata/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/experimental-vs-packages/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/interactive-window/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/metadata-tools/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/roslyn-analyzers/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/roslyn-master-nightly/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/roslyn-tools/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/roslyn/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/sourcelink/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/symreader-converter/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/symreader-native/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/symreader-portable/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/symreader/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/system-commandline/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/aspnet-blazor/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-core/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-coreclr/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://myget.org/F/roslyn_concord/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://myget.org/F/vs-devcore/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://myget.org/F/vs-editor/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://vside.myget.org/F/vs-impl/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://vside.myget.org/F/vssdk/api/v3/index.json</EnvironmentRestoreSources>
  </PropertyGroup>

  <ItemGroup>
    <EnvironmentVariables Include="DOTNET_TOOL_DIR=$(DotNetCliToolDir)" />
    <EnvironmentVariables Include="DotNetToolPath=$(DotNetCliToolDir)" />
    <EnvironmentVariables Include="DotNetTool=$(DotNetCliToolDir)dotnet" />
    <EnvironmentVariables Include="BUILD_TOOLS_TOOL_DIR=$(ProjectDir)Tools/" Condition="'$(RepositoryName)' != 'arcade'" />
    <EnvironmentVariables Include="BUILD_TOOLS_TOOL_DIR=$(ProjectDir)Tools/source-build/" Condition="'$(RepositoryName)' == 'arcade'" />
    <EnvironmentVariables Include="BUILDTOOLS_SKIP_CROSSGEN=1" />
    <!-- New env-var names to replace the ones above over time -->
    <EnvironmentVariables Include="DotNetBuildFromSource=true" />
    <EnvironmentVariables Include="DotNetRestorePackagesPath=$(PackagesDir)" />
    <EnvironmentVariables Include="DotNetBuildOffline=true" Condition="'$(OfflineBuild)' == 'true'" />
    <EnvironmentVariables Include="AddDotnetfeedProjectSource=false" Condition="'$(OfflineBuild)' == 'true'" />
    <EnvironmentVariables Include="DotNetCoreSdkDir=$(DotNetCliToolDir)" />
    <EnvironmentVariables Include="DotNetBuildToolsDir=$(ProjectDir)Tools/" Condition="'$(RepositoryName)' == 'arcade'" />
    <EnvironmentVariables Include="DotNetBuildToolsDir=$(ProjectDir)Tools/source-built" Condition="'$(RepositoryName)' != 'arcade'" />
    <!-- DotNetRoot is used by Arcade vs DotNetCoreSdkDir for BuildTools -->
    <EnvironmentVariables Include="DotNetRoot=$(DotNetCliToolDir)" />
    <EnvironmentVariables Include="DOTNET_HOST_PATH=$(DotNetCliToolDir)dotnet" />
    <!-- _InitializeDotNetCli is used by websdk and templating to decide whether to init the SDK -->
    <EnvironmentVariables Include="_InitializeDotNetCli=$(DotNetCliToolDir)" />
    <EnvironmentVariables Include="BuildToolsPackageDir=$(ToolsDir)" Condition="'$(RepositoryName)' == 'arcade'" />
    <EnvironmentVariables Include="BuildToolsPackageDir=$(ToolsDir)source-built" Condition="'$(RepositoryName)' != 'arcade'" />

    <EnvironmentVariables Include="StabilizePackageVersion=$(UseStableVersions)" Condition="'$(UseStableVersions)' != ''" />
    <EnvironmentVariables Include="PB_IsStable=$(UseStableVersions)" Condition="'$(UseStableVersions)' != ''" />

    <EnvironmentVariables Include="PackageVersionStamp=$(VersionStamp)" Condition="'$(VersionStamp)' != ''" />
    <EnvironmentVariables Include="PB_VersionStamp=$(VersionStamp)" Condition="'$(VersionStamp)' != ''" />
    <EnvironmentVariables Include="PreReleaseVersionLabel=$(VersionStamp)" Condition="'$(VersionStamp)' != ''" />
    <EnvironmentVariables Include="DotNetUseShippingVersions=true" />
    <EnvironmentVariables Include="ContinuousIntegrationBuild=true" />

    <EnvironmentVariables Include="RestoreSources=$(EnvironmentRestoreSources)" />

    <!-- If MSBuild exits early, make sure debug output like 'MSBuild_*.failure.txt' ends up in a place we can see it. -->
    <EnvironmentVariables Include="MSBUILDDEBUGPATH=$(MSBuildDebugPathTargetDir)" />
    <EnvironmentVariables Include="MSBUILDDEBUGCOMM=1" />
    <EnvironmentVariables Include="MSBUILDDEBUGSCHEDULER=1" />
    <EnvironmentVariables Include="MSBUILDDEBUGFORCECACHING=1" />
    <EnvironmentVariables Include="MSBUILDDEBUG=1" />
    <EnvironmentVariables Include="MSBUILDDEBUGEVALUATION=1" />
    <EnvironmentVariables Include="MSBUILDTARGETOUTPUTLOGGING=1" />
    <EnvironmentVariables Include="MSBUILDLOGTASKINPUTS=1" />
    <EnvironmentVariables Include="MSBUILDEMITSOLUTION=1" />
    <EnvironmentVariables Include="MSBUILDLOGVERBOSERARSEARCHRESULTS=1" />

    <!-- Output Roslyn logs to allow debugging compiler errors -->
    <EnvironmentVariables Include="RoslynCommandLineLogFile=$(RoslynDebugPathTargetDir)" />

    <!-- Turn off node reuse for source build because repos use conflicting versions 
         of compilers which cause assembly load errors.  
         See https://github.com/dotnet/source-build/issues/541 -->
    <EnvironmentVariables Include="MSBUILDDISABLENODEREUSE=1" />

    <!-- some repos do this in a separate process -->
    <EnvironmentVariables Include="OfficialBuildId=$(OfficialBuildId)" />
    <EnvironmentVariables Include="BUILD_BUILDNUMBER=$(OfficialBuildId)" />
    <EnvironmentVariables Include="GitCommitCount=$(GitCommitCount)" />
    <EnvironmentVariables Include="GitCommitHash=$(GitCommitHash)" Condition="'$(GitCommitHash)' != ''" />
    <EnvironmentVariables Include="GitCommitHash=$(PreferredHash)" Condition="'$(PreferredHash)' != ''" />
    <EnvironmentVariables Include="SourceRevisionId=$(GitCommitHash)" Condition="'$(GitCommitHash)' != ''" />
    <EnvironmentVariables Include="SourceRevisionId=$(PreferredHash)" Condition="'$(PreferredHash)' != ''" />
    <EnvironmentVariables Include="RepositoryCommit=$(GitCommitHash)" Condition="'$(GitCommitHash)' != ''" />
    <EnvironmentVariables Include="RepositoryCommit=$(PreferredHash)" Condition="'$(PreferredHash)' != ''" />
    <EnvironmentVariables Include="RepositoryType=Git" />
    <EnvironmentVariables Include="RepositoryUrl=https://github.com/dotnet/source-build" />
    <EnvironmentVariables Include="DeterministicSourcePaths=false" />
  </ItemGroup>

  <ItemGroup>
    <ArcadeSdkOverride Include="Microsoft.DotNet.Arcade.Sdk" Group="ARCADE" Version="1.0.0-dev"/>
    <ArcadeConfigurationOverride Include="Microsoft.DotNet.Build.Tasks.Configuration" Group="ARCADE_CONFIGURATION" Version="1.0.0-dev"/>
    <ArcadeCoreFxTestingOverride Include="Microsoft.DotNet.CoreFxTesting" Group="ARCADE_COREFX_TESTING" Version="1.0.0-dev"/>
    <ArcadePackagingOverride Include="Microsoft.DotNet.Build.Tasks.Packaging" Group="ARCADE_PACKAGING" Version="1.0.0-dev"/>
    <ILSdkOverride Include="Microsoft.NET.Sdk.IL" Group="IL" />
    <MsBuildTraversalSdkOverride Include="Microsoft.Build.Traversal" Group="MSBUILD_TRAVERSAL" Version="2.0.2"/>
  </ItemGroup>
</Project>
