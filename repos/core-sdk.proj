<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />

  <PropertyGroup>
    <BuildCommandArgs Condition="'$(TargetOS)' == 'Linux'">--runtime-id $(TargetRid)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -c $(Configuration)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) --stage0 $(DotNetCliToolDir)</BuildCommandArgs>

    <!-- Consume the source-built Core-Setup. This line must be removed to source-build CLI without source-building Core-Setup first. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:CoreSetupBlobRootUrl=file:%2F%2F$(LocalBlobStorageRoot)</BuildCommandArgs>

    <!-- Pass in package version props using the Product Construction (ProdCon) API. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:PB_PackageVersionPropsUrl=file:%2F%2F$(PackageVersionPropsPath)</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) /p:SkipBuildingInstallers=true</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeNuGetPackageArchive=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeAdditionalSharedFrameworks=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:UsePortableLinuxSharedFramework=$(PortableBuild)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeSharedFrameworksForBackwardsCompatibilityTests=false</BuildCommandArgs>

    <BuildCommand>$(ProjectDirectory)/build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <PackageOutputRid Condition="'$(TargetOS)' == 'Windows_NT'">win-x64</PackageOutputRid>
    <PackageOutputRid Condition="'$(TargetOS)' == 'OSX'">osx-x64</PackageOutputRid>
    <PackageOutputRid Condition="'$(PackageOutputRid)' == ''">$(TargetRid)</PackageOutputRid>
    <PackagesOutput>$(ProjectDirectory)bin/2/$(PackageOutputRid)/packages/</PackagesOutput>
    <TarBallOutput>$(PackagesOutput)</TarBallOutput>
    <RepoApiImplemented>false</RepoApiImplemented>
    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>

    <EnvironmentExternalRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentExternalRestoreSources>
    <EnvironmentExternalRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentExternalRestoreSources)%3B$(PrebuiltPackagesPath)</EnvironmentExternalRestoreSources>

    <OrchestratedManifestBuildName>N/A</OrchestratedManifestBuildName>
  </PropertyGroup>

  <ItemGroup>
    <RepositoryReference Include="newtonsoft-json" />
    <RepositoryReference Include="toolset" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="GitInfoCommitCount=$(GitCommitCount)" />
    <EnvironmentVariables Include="GitInfoCommitHash=$(GitCommitHash)" />
    <EnvironmentVariables Include="CLIBUILD_SKIP_TESTS=true" />

    <!-- Pass multiple restore sources as environment: avoid the shell seeing ';' in an Exec. -->
    <EnvironmentVariables Include="ExternalRestoreSources=$(EnvironmentExternalRestoreSources)" />

    <!-- Exclude AspNetCore Runtime as an environment variable to ensure the entire build knows. As a
      parameter, it is lost during the restore call.  -->
    <EnvironmentVariables Include="IncludeAspNetCoreRuntime=false" />

    <!-- Disable bundled tools until we can figure out:
      Unable to find package dotnet-dev-certs.
      Unable to find package dotnet-ef.
      Unable to find package dotnet-sql-cache.
      Unable to find package dotnet-user-secrets.
      Unable to find package dotnet-watch.  -->
    <EnvironmentVariables Include="CLIBUILD_SKIP_BUNDLEDDOTNETTOOLS=true" />

    <!-- Produce stable versions for RTM only.  When https://github.com/dotnet/source-build/issues/550
                  is fixed we will be able to determine this automatically.  -->
    <EnvironmentVariables Include="DropSuffix=true"
                          Condition="'$(UseStableVersions)' == 'true'" />
  </ItemGroup>

  <Target Name="AddProdConFeed" BeforeTargets="Build">
    <PropertyGroup>
      <ProdConBlobFeedUrl>$([System.IO.File]::ReadAllText('$(ProdConFeedPath)').Trim())</ProdConBlobFeedUrl>

      <NugetConfigTargetsFile>$(ProjectDirectory)build\NugetConfigFile.targets</NugetConfigTargetsFile>
      <ReplacementEndMark>&lt;/ItemGroup&gt;</ReplacementEndMark>
      <InsertItemLine>&lt;NugetConfigPrivateFeeds Include="$(ProdConBlobFeedUrl)" /&gt;$(ReplacementEndMark)</InsertItemLine>

      <NugetConfigTargetsContents>$([System.IO.File]::ReadAllText('$(NugetConfigTargetsFile)'))</NugetConfigTargetsContents>
    </PropertyGroup>

    <WriteLinesToFile File="$(NugetConfigTargetsFile)"
                      Lines="$(NugetConfigTargetsContents.Replace('$(ReplacementEndMark)', '$(InsertItemLine)'))"
                      Condition="! $(NugetConfigTargetsContents.Contains('$(InsertItemLine)'))"
                      Overwrite="true" />
  </Target>

  <!-- Ignore this error in the CLI build, which doesn't seem to happen in ProdCon:
      error NU5104: A stable release of a package should not have a prerelease dependency. Either
      modify the version spec of dependency "NuGet.Frameworks [4.7.0-rtm.5156, )" or update the
      version field in the nuspec.  -->
  <Target Name="AddNoWarnNU5104ByDefault" BeforeTargets="Build">
    <PropertyGroup>
      <BuildDefaultsFile>$(ProjectDirectory)build\BuildDefaults.props</BuildDefaultsFile>
      <ReplacementEndMark>&lt;/NoWarn&gt;</ReplacementEndMark>
      <InsertItemLine>;NU5104$(ReplacementEndMark)</InsertItemLine>

      <BuildDefaultsPropsContents>$([System.IO.File]::ReadAllText('$(BuildDefaultsFile)'))</BuildDefaultsPropsContents>
    </PropertyGroup>

    <WriteLinesToFile File="$(BuildDefaultsFile)"
                      Lines="$(BuildDefaultsPropsContents.Replace('$(ReplacementEndMark)', '$(InsertItemLine)'))"
                      Condition="! $(BuildDefaultsPropsContents.Contains('$(InsertItemLine)'))"
                      Overwrite="true" />
  </Target>

  <Target Name="CopyTarBall" AfterTargets="CopyPackage">
    <ItemGroup>
      <CliTarBalls Include="$(TarBallOutput)*$(TarBallExtension)" />
    </ItemGroup>

    <Copy SourceFiles="@(CliTarBalls)"
          DestinationFolder="$(SourceBuiltTarBallPath)"
          Condition="'@(CliTarBalls)'!=''" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
